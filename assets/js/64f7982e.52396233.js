"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[442],{1869:function(e,n,r){r.r(n),r.d(n,{assets:function(){return N},contentTitle:function(){return C},default:function(){return D},frontMatter:function(){return S},metadata:function(){return y},toc:function(){return A}});var a=r(7462),t=r(3366),l=r(7294),i=r(3905),o=r(2805),s=r(4165),c=r(5861),d=r(9583),u=r(1649),m=r(8193),p=r(148),h=r(4184),f=r.n(h),v=["variant"],g=[{name:"",id:0,children:[1,2,3],parent:null},{name:"Fruits",children:[],id:1,parent:0,isBranch:!0},{name:"Drinks",children:[4,5],id:2,parent:0,isBranch:!0},{name:"Vegetables",children:[],id:3,parent:0,isBranch:!0},{name:"Pine colada",children:[],id:4,parent:2},{name:"Water",children:[],id:5,parent:2}];var x=function(e){var n,r,a=e.isOpen,t=e.className,i="arrow",o=f()(i,((n={})["arrow--closed"]=!a,n),((r={})["arrow--open"]=a,r),t);return l.createElement(u.am,{className:o})},b=function(e){var n=e.variant,r=(0,t.Z)(e,v);switch(n){case"all":return l.createElement(d.xik,r);case"none":return l.createElement(d.u9M,r);case"some":return l.createElement(d.kty,r);default:return null}},k=function(){var e=(0,l.useRef)(null),n=(0,l.useState)(g),r=n[0],t=n[1],i=(0,l.useState)([]),o=i[0],d=i[1],u=function(e){var n=e.element;return new Promise((function(e){n.children.length>0?e():setTimeout((function(){t((function(e){return r=e,a=n.id,t=[{name:"Child Node "+e.length,children:[],id:e.length,parent:n.id,isBranch:!0},{name:"Another child Node",children:[],id:e.length+1,parent:n.id}],r.map((function(e){return e.id===a&&(e.children=t.map((function(e){return e.id}))),e})).concat(t);var r,a,t})),e()}),1e3)}))},h=function(){var n=(0,c.Z)((0,s.Z)().mark((function n(r){var a,t,l;return(0,s.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=0===r.element.children.length,t=o.find((function(e){return e.id===r.element.id})),n.next=4,u(r);case 4:a&&!t&&(l=e.current,d([].concat(o,[r.element])),l&&(l.innerHTML=r.element.name+" loaded"),setTimeout((function(){l&&(l.innerHTML="")}),5e3));case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}();return l.createElement(l.Fragment,null,l.createElement("div",null,l.createElement("div",{className:"visually-hidden",ref:e,role:"alert","aria-live":"polite"}),l.createElement("div",{className:"checkbox"},l.createElement(p.ZP,{data:r,"aria-label":"Checkbox tree",onLoadData:h,multiSelect:!0,propagateSelect:!0,togglableSelect:!0,propagateSelectUpwards:!0,nodeRenderer:function(e){var n=e.element,r=e.isBranch,t=e.isExpanded,i=e.isSelected,o=e.isHalfSelected,s=e.getNodeProps,c=e.level,d=e.handleSelect,u=e.handleExpand;return l.createElement("div",(0,a.Z)({},s({onClick:u}),{style:{marginLeft:40*(c-1)}}),r&&function(e,n){return e&&0===n.children.length?l.createElement(l.Fragment,null,l.createElement("span",{role:"alert","aria-live":"assertive",className:"visually-hidden"},"loading ",n.name),l.createElement(m.xz6,{"aria-hidden":!0,className:"loading-icon"})):l.createElement(x,{isOpen:e})}(t,n),l.createElement(b,{className:"checkbox-icon",onClick:function(e){d(e),e.stopPropagation()},variant:o?"some":i?"all":"none"}),l.createElement("span",{className:"name"},n.name))}}))))},w=["components"],S={title:"Asynchronous loading"},C=void 0,y={unversionedId:"examples-MultiSelectCheckboxAsync",id:"examples-MultiSelectCheckboxAsync",title:"Asynchronous loading",description:"This example demonstrates how to create a checkbox tree with asynchronous loading",source:"@site/docs/examples-MultiSelectCheckboxAsync.mdx",sourceDirName:".",slug:"/examples-MultiSelectCheckboxAsync",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxAsync",draft:!1,tags:[],version:"current",frontMatter:{title:"Asynchronous loading"},sidebar:"docs",previous:{title:"Checkbox with disabled nodes",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxDisabled"},next:{title:"Checkbox with controlled selectedIds",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxControlled"}},N={},A=[],E={toc:A};function D(e){var n=e.components,r=(0,t.Z)(e,w);return(0,i.kt)("wrapper",(0,a.Z)({},E,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This example demonstrates how to create a checkbox tree with asynchronous loading"),(0,i.kt)(o.Z,{component:k,js:'import React, { useRef, useState } from "react";\r\nimport { FaSquare, FaCheckSquare, FaMinusSquare } from "react-icons/fa";\r\nimport { IoMdArrowDropright } from "react-icons/io";\r\nimport { AiOutlineLoading } from "react-icons/ai";\r\nimport TreeView from "react-accessible-treeview";\r\nimport cx from "classnames";\r\nimport "./styles.css";\r\n\r\nconst initialData = [\r\n  {\r\n    name: "",\r\n    id: 0,\r\n    children: [1, 2, 3],\r\n    parent: null,\r\n  },\r\n  {\r\n    name: "Fruits",\r\n    children: [],\r\n    id: 1,\r\n    parent: 0,\r\n    isBranch: true,\r\n  },\r\n  {\r\n    name: "Drinks",\r\n    children: [4, 5],\r\n    id: 2,\r\n    parent: 0,\r\n    isBranch: true,\r\n  },\r\n  {\r\n    name: "Vegetables",\r\n    children: [],\r\n    id: 3,\r\n    parent: 0,\r\n    isBranch: true,\r\n  },\r\n  {\r\n    name: "Pine colada",\r\n    children: [],\r\n    id: 4,\r\n    parent: 2,\r\n  },\r\n  {\r\n    name: "Water",\r\n    children: [],\r\n    id: 5,\r\n    parent: 2,\r\n  },\r\n];\r\n\r\nfunction MultiSelectCheckboxAsync() {\r\n  const loadedAlertElement = useRef(null);\r\n  const [data, setData] = useState(initialData);\r\n  const [nodesAlreadyLoaded, setNodesAlreadyLoaded] = useState([]);\r\n\r\n  const updateTreeData = (list, id, children) => {\r\n    const data = list.map((node) => {\r\n      if (node.id === id) {\r\n        node.children = children.map((el) => {\r\n          return el.id;\r\n        });\r\n      }\r\n      return node;\r\n    });\r\n    return data.concat(children);\r\n  };\r\n\r\n  const onLoadData = ({ element }) => {\r\n    return new Promise((resolve) => {\r\n      if (element.children.length > 0) {\r\n        resolve();\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        setData((value) =>\r\n          updateTreeData(value, element.id, [\r\n            {\r\n              name: `Child Node ${value.length}`,\r\n              children: [],\r\n              id: value.length,\r\n              parent: element.id,\r\n              isBranch: true,\r\n            },\r\n            {\r\n              name: "Another child Node",\r\n              children: [],\r\n              id: value.length + 1,\r\n              parent: element.id,\r\n            },\r\n          ])\r\n        );\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  const wrappedOnLoadData = async (props) => {\r\n    const nodeHasNoChildData = props.element.children.length === 0;\r\n    const nodeHasAlreadyBeenLoaded = nodesAlreadyLoaded.find(\r\n      (e) => e.id === props.element.id\r\n    );\r\n\r\n    await onLoadData(props);\r\n\r\n    if (nodeHasNoChildData && !nodeHasAlreadyBeenLoaded) {\r\n      const el = loadedAlertElement.current;\r\n      setNodesAlreadyLoaded([...nodesAlreadyLoaded, props.element]);\r\n      el && (el.innerHTML = `${props.element.name} loaded`);\r\n\r\n      // Clearing aria-live region so loaded node alerts no longer appear in DOM\r\n      setTimeout(() => {\r\n        el && (el.innerHTML = "");\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div\r\n          className="visually-hidden"\r\n          ref={loadedAlertElement}\r\n          role="alert"\r\n          aria-live="polite"\r\n        ></div>\r\n        <div className="checkbox">\r\n          <TreeView\r\n            data={data}\r\n            aria-label="Checkbox tree"\r\n            onLoadData={wrappedOnLoadData}\r\n            multiSelect\r\n            propagateSelect\r\n            togglableSelect\r\n            propagateSelectUpwards\r\n            nodeRenderer={({\r\n              element,\r\n              isBranch,\r\n              isExpanded,\r\n              isSelected,\r\n              isHalfSelected,\r\n              getNodeProps,\r\n              level,\r\n              handleSelect,\r\n              handleExpand,\r\n            }) => {\r\n              const branchNode = (isExpanded, element) => {\r\n                return isExpanded && element.children.length === 0 ? (\r\n                  <>\r\n                    <span\r\n                      role="alert"\r\n                      aria-live="assertive"\r\n                      className="visually-hidden"\r\n                    >\r\n                      loading {element.name}\r\n                    </span>\r\n                    <AiOutlineLoading\r\n                      aria-hidden={true}\r\n                      className="loading-icon"\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  <ArrowIcon isOpen={isExpanded} />\r\n                );\r\n              };\r\n              return (\r\n                <div\r\n                  {...getNodeProps({ onClick: handleExpand })}\r\n                  style={{ marginLeft: 40 * (level - 1) }}\r\n                >\r\n                  {isBranch && branchNode(isExpanded, element)}\r\n                  <CheckBoxIcon\r\n                    className="checkbox-icon"\r\n                    onClick={(e) => {\r\n                      handleSelect(e);\r\n                      e.stopPropagation();\r\n                    }}\r\n                    variant={\r\n                      isHalfSelected ? "some" : isSelected ? "all" : "none"\r\n                    }\r\n                  />\r\n                  <span className="name">{element.name}</span>\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst ArrowIcon = ({ isOpen, className }) => {\r\n  const baseClass = "arrow";\r\n  const classes = cx(\r\n    baseClass,\r\n    { [`${baseClass}--closed`]: !isOpen },\r\n    { [`${baseClass}--open`]: isOpen },\r\n    className\r\n  );\r\n  return <IoMdArrowDropright className={classes} />;\r\n};\r\n\r\nconst CheckBoxIcon = ({ variant, ...rest }) => {\r\n  switch (variant) {\r\n    case "all":\r\n      return <FaCheckSquare {...rest} />;\r\n    case "none":\r\n      return <FaSquare {...rest} />;\r\n    case "some":\r\n      return <FaMinusSquare {...rest} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default MultiSelectCheckboxAsync;\r\n',css:"@keyframes spinner {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n.loading-icon {\r\n  animation: spinner 1.5s linear infinite;\r\n  margin-left: 5px;\r\n}\r\n\r\n.visually-hidden {\r\n  position: absolute;\r\n  clip-path: circle(0);\r\n  border: 0;\r\n  height: 1px;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  padding: 0;\r\n  width: 1px;\r\n  white-space: nowrap;\r\n}\r\n",mdxType:"CodeTabs"}))}D.isMDXComponent=!0}}]);
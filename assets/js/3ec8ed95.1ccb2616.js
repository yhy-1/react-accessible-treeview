"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[147],{7207:function(e,n,r){r.r(n),r.d(n,{assets:function(){return g},contentTitle:function(){return S},default:function(){return E},frontMatter:function(){return C},metadata:function(){return v},toc:function(){return w}});var t=r(7462),a=r(3366),o=r(7294),c=r(3905),l=r(2805),s=r(9583),i=r(1649),d=r(148),m=r(4184),u=r.n(m),p=["variant"],h=(0,d.fK)({name:"",children:[{name:"Fruits",children:[{name:"Avocados"},{name:"Bananas"},{name:"Berries"},{name:"Oranges"},{name:"Pears"}]},{name:"Drinks",children:[{name:"Apple Juice"},{name:"Chocolate"},{name:"Coffee"},{name:"Tea",children:[{name:"Black Tea"},{name:"Green Tea"},{name:"Red Tea"},{name:"Matcha"}]}]},{name:"Vegetables",children:[{name:"Beets"},{name:"Carrots"},{name:"Celery"},{name:"Lettuce"},{name:"Onions"}]}]});var b=function(e){var n,r,t=e.isOpen,a=e.className,c="arrow",l=u()(c,((n={})["arrow--closed"]=!t,n),((r={})["arrow--open"]=t,r),a);return o.createElement(i.am,{className:l})},x=function(e){var n=e.variant,r=(0,a.Z)(e,p);switch(n){case"all":return o.createElement(s.xik,r);case"none":return o.createElement(s.u9M,r);case"some":return o.createElement(s.kty,r);default:return null}},k=function(){var e=(0,o.useState)([]),n=e[0],r=e[1],a=function(){r(document.querySelector("#txtIdsToSelect").value.split(",").map((function(e){return parseInt(e.trim())})))};return o.createElement("div",null,o.createElement("div",null,o.createElement("label",{htmlFor:"txtIdsToSelect"},"Comma-delimited list of IDs to set:"),o.createElement("input",{id:"txtIdsToSelect",type:"text",onKeyDown:function(e){"Enter"===e.key&&a()}}),o.createElement("button",{onClick:function(){return a()}},"Set")),o.createElement("div",null,o.createElement("button",{onClick:function(){return r([])}},"Clear Selected Nodes")),o.createElement("div",{className:"checkbox"},o.createElement(d.ZP,{data:h,"aria-label":"Checkbox tree",multiSelect:!0,selectedIds:n,defaultExpandedIds:[1],propagateSelect:!0,propagateSelectUpwards:!0,togglableSelect:!0,nodeRenderer:function(e){var n=e.element,r=e.isBranch,a=e.isExpanded,c=e.isSelected,l=e.isHalfSelected,s=e.isDisabled,i=e.getNodeProps,d=e.level,m=e.handleSelect,u=e.handleExpand;return o.createElement("div",(0,t.Z)({},i({onClick:u}),{style:{marginLeft:40*(d-1),opacity:s?.5:1}}),r&&o.createElement(b,{isOpen:a}),o.createElement(x,{className:"checkbox-icon",onClick:function(e){m(e),e.stopPropagation()},variant:l?"some":c?"all":"none"}),o.createElement("span",{className:"name"},n.name,"-",n.id))}})))},f=["components"],C={title:"Checkbox with controlled selectedIds"},S=void 0,v={unversionedId:"examples-MultiSelectCheckboxControlled",id:"examples-MultiSelectCheckboxControlled",title:"Checkbox with controlled selectedIds",description:"This example demonstrates how to create a checkbox tree",source:"@site/docs/examples-MultiSelectCheckboxControlled.mdx",sourceDirName:".",slug:"/examples-MultiSelectCheckboxControlled",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxControlled",draft:!1,tags:[],version:"current",frontMatter:{title:"Checkbox with controlled selectedIds"},sidebar:"docs",previous:{title:"Asynchronous loading",permalink:"/react-accessible-treeview/docs/examples-MultiSelectCheckboxAsync"}},g={},w=[],I={toc:w};function E(e){var n=e.components,r=(0,a.Z)(e,f);return(0,c.kt)("wrapper",(0,t.Z)({},I,r,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"This example demonstrates how to create a checkbox tree"),(0,c.kt)(l.Z,{component:k,js:'import React, { useState } from "react";\r\nimport { FaSquare, FaCheckSquare, FaMinusSquare } from "react-icons/fa";\r\nimport { IoMdArrowDropright } from "react-icons/io";\r\nimport TreeView, { flattenTree } from "react-accessible-treeview";\r\nimport cx from "classnames";\r\nimport "./styles.css";\r\n\r\nconst folder = {\r\n  name: "",\r\n  children: [\r\n    {\r\n      name: "Fruits",\r\n      children: [\r\n        { name: "Avocados" },\r\n        { name: "Bananas" },\r\n        { name: "Berries" },\r\n        { name: "Oranges" },\r\n        { name: "Pears" },\r\n      ],\r\n    },\r\n    {\r\n      name: "Drinks",\r\n      children: [\r\n        { name: "Apple Juice" },\r\n        { name: "Chocolate" },\r\n        { name: "Coffee" },\r\n        {\r\n          name: "Tea",\r\n          children: [\r\n            { name: "Black Tea" },\r\n            { name: "Green Tea" },\r\n            { name: "Red Tea" },\r\n            { name: "Matcha" },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: "Vegetables",\r\n      children: [\r\n        { name: "Beets" },\r\n        { name: "Carrots" },\r\n        { name: "Celery" },\r\n        { name: "Lettuce" },\r\n        { name: "Onions" },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nconst data = flattenTree(folder);\r\n\r\nfunction MultiSelectCheckboxControlled() {\r\n  const [selectedIds, setSelectedIds] = useState([]);\r\n\r\n  const onKeyDown = (e) => {\r\n    if (e.key === "Enter") {\r\n      getAndSetIds();\r\n    }\r\n  };\r\n\r\n  const getAndSetIds = () => {\r\n    setSelectedIds(\r\n      document\r\n        .querySelector("#txtIdsToSelect")\r\n        .value.split(",")\r\n        .map((x) => parseInt(x.trim()))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <label htmlFor="txtIdsToSelect">\r\n          Comma-delimited list of IDs to set:\r\n        </label>\r\n        <input id="txtIdsToSelect" type="text" onKeyDown={onKeyDown} />\r\n        <button onClick={() => getAndSetIds()}>Set</button>\r\n      </div>\r\n      <div>\r\n        <button onClick={() => setSelectedIds([])}>Clear Selected Nodes</button>\r\n      </div>\r\n      <div className="checkbox">\r\n        <TreeView\r\n          data={data}\r\n          aria-label="Checkbox tree"\r\n          multiSelect\r\n          selectedIds={selectedIds}\r\n          defaultExpandedIds={[1]}\r\n          propagateSelect\r\n          propagateSelectUpwards\r\n          togglableSelect\r\n          nodeRenderer={({\r\n            element,\r\n            isBranch,\r\n            isExpanded,\r\n            isSelected,\r\n            isHalfSelected,\r\n            isDisabled,\r\n            getNodeProps,\r\n            level,\r\n            handleSelect,\r\n            handleExpand,\r\n          }) => {\r\n            return (\r\n              <div\r\n                {...getNodeProps({ onClick: handleExpand })}\r\n                style={{\r\n                  marginLeft: 40 * (level - 1),\r\n                  opacity: isDisabled ? 0.5 : 1,\r\n                }}\r\n              >\r\n                {isBranch && <ArrowIcon isOpen={isExpanded} />}\r\n                <CheckBoxIcon\r\n                  className="checkbox-icon"\r\n                  onClick={(e) => {\r\n                    handleSelect(e);\r\n                    e.stopPropagation();\r\n                  }}\r\n                  variant={\r\n                    isHalfSelected ? "some" : isSelected ? "all" : "none"\r\n                  }\r\n                />\r\n                <span className="name">\r\n                  {element.name}-{element.id}\r\n                </span>\r\n              </div>\r\n            );\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ArrowIcon = ({ isOpen, className }) => {\r\n  const baseClass = "arrow";\r\n  const classes = cx(\r\n    baseClass,\r\n    { [`${baseClass}--closed`]: !isOpen },\r\n    { [`${baseClass}--open`]: isOpen },\r\n    className\r\n  );\r\n  return <IoMdArrowDropright className={classes} />;\r\n};\r\n\r\nconst CheckBoxIcon = ({ variant, ...rest }) => {\r\n  switch (variant) {\r\n    case "all":\r\n      return <FaCheckSquare {...rest} />;\r\n    case "none":\r\n      return <FaSquare {...rest} />;\r\n    case "some":\r\n      return <FaMinusSquare {...rest} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default MultiSelectCheckboxControlled;\r\n',css:".checkbox {\r\n    font-size: 16px;\r\n    user-select: none;\r\n    min-height: 320px;\r\n    padding: 20px;\r\n    box-sizing: content-box;\r\n  }\r\n  \r\n  .checkbox .tree,\r\n  .checkbox .tree-node,\r\n  .checkbox .tree-node-group {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  \r\n  .checkbox .tree-branch-wrapper,\r\n  .checkbox .tree-node__leaf {\r\n    outline: none;\r\n  }\r\n  \r\n  .checkbox .tree-node {\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .checkbox .tree-node .name:hover {\r\n    background: rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .checkbox .tree-node--focused .name {\r\n    background: rgba(0, 0, 0, 0.2);\r\n  }\r\n  \r\n  .checkbox .tree-node {\r\n    display: inline-block;\r\n  }\r\n  \r\n  .checkbox .checkbox-icon {\r\n    margin: 0 5px;\r\n    vertical-align: middle;\r\n  }\r\n  \r\n  .checkbox button {\r\n    border: none;\r\n    background: transparent;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .checkbox .arrow {\r\n    margin-left: 5px;\r\n    vertical-align: middle;\r\n  }\r\n  \r\n  .checkbox .arrow--open {\r\n    transform: rotate(90deg);\r\n  }\r\n  ",mdxType:"CodeTabs"}))}E.isMDXComponent=!0}}]);
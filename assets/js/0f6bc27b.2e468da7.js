"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[99],{4650:function(e,n,r){r.r(n),r.d(n,{assets:function(){return v},contentTitle:function(){return E},default:function(){return k},frontMatter:function(){return h},metadata:function(){return C},toc:function(){return w}});var a=r(7462),t=r(3366),o=r(7294),d=r(3905),s=r(1649),l=r(148),i=r(4184),c=r.n(i),m=(0,l.fK)({name:"",children:[{name:"Fruits",children:[{name:"Avocados"},{name:"Bananas"},{name:"Berries"},{name:"Oranges"},{name:"Pears"}]},{name:"Drinks",children:[{name:"Apple Juice"},{name:"Chocolate"},{name:"Coffee"},{name:"Tea",children:[{name:"Black Tea"},{name:"Green Tea"},{name:"Red Tea"},{name:"Matcha"}]}]},{name:"Vegetables",children:[{name:"Beets"},{name:"Carrots"},{name:"Celery"},{name:"Lettuce"},{name:"Onions"}]}]});var p=function(e){var n,r,a=e.isOpen,t=e.className,d="arrow",l=c()(d,((n={})["arrow--closed"]=!a,n),((r={})["arrow--open"]=a,r),t);return o.createElement(s.am,{className:l})},u=function(){var e=(0,o.useState)(),n=e[0],r=e[1],t=function(){r(document.querySelector("#txtIdsToExpand").value.split(",").map((function(e){return parseInt(e.trim())})))};return o.createElement("div",null,o.createElement("div",null,o.createElement("label",{htmlFor:"txtIdsToExpand"},"Comma-delimited list of branch node IDs to expand:"),o.createElement("input",{id:"txtIdsToExpand",type:"text",onKeyDown:function(e){"Enter"===e.key&&t()}}),o.createElement("button",{onClick:function(){return t()}},"Set")),o.createElement("div",null,o.createElement("button",{onClick:function(){return r([])}},"Clear all expanded nodes")),o.createElement("div",{className:"checkbox"},o.createElement(l.ZP,{data:m,"aria-label":"Controlled expanded node tree",expandedIds:n,defaultExpandedIds:[1],nodeRenderer:function(e){var n=e.element,r=e.isBranch,t=e.isExpanded,d=e.isDisabled,s=e.getNodeProps,l=e.level,i=e.handleExpand;return o.createElement("div",(0,a.Z)({},s({onClick:i}),{style:{marginLeft:40*(l-1),opacity:d?.5:1}}),r&&o.createElement(p,{isOpen:t}),o.createElement("span",{className:"name"},n.name,"-",n.id))}})))},x=r(3952),b=r(2805),f=["components"],h={title:"Basic with controlled expandable node"},E=void 0,C={unversionedId:"examples-ControlledExpandedNode",id:"examples-ControlledExpandedNode",title:"Basic with controlled expandable node",description:"This example demonstrates how to create a simple tree with controlled expandable node",source:"@site/docs/examples-ControlledExpandedNode.mdx",sourceDirName:".",slug:"/examples-ControlledExpandedNode",permalink:"/docs/examples-ControlledExpandedNode",draft:!1,tags:[],version:"current",frontMatter:{title:"Basic with controlled expandable node"},sidebar:"docs",previous:{title:"Basic",permalink:"/docs/examples-Basic"},next:{title:"Directory tree (single selection)",permalink:"/docs/examples-DirectoryTree"}},v={},w=[],I={toc:w};function k(e){var n=e.components,r=(0,t.Z)(e,f);return(0,d.kt)("wrapper",(0,a.Z)({},I,r,{components:n,mdxType:"MDXLayout"}),(0,d.kt)("p",null,"This example demonstrates how to create a simple tree with controlled expandable node"),(0,d.kt)(b.Z,{component:u,js:'import React, { useState } from "react";\r\nimport { IoMdArrowDropright } from "react-icons/io";\r\nimport TreeView, { flattenTree } from "react-accessible-treeview";\r\nimport cx from "classnames";\r\n\r\nconst folder = {\r\n  name: "",\r\n  children: [\r\n    {\r\n      name: "Fruits",\r\n      children: [\r\n        { name: "Avocados" },\r\n        { name: "Bananas" },\r\n        { name: "Berries" },\r\n        { name: "Oranges" },\r\n        { name: "Pears" },\r\n      ],\r\n    },\r\n    {\r\n      name: "Drinks",\r\n      children: [\r\n        { name: "Apple Juice" },\r\n        { name: "Chocolate" },\r\n        { name: "Coffee" },\r\n        {\r\n          name: "Tea",\r\n          children: [\r\n            { name: "Black Tea" },\r\n            { name: "Green Tea" },\r\n            { name: "Red Tea" },\r\n            { name: "Matcha" },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: "Vegetables",\r\n      children: [\r\n        { name: "Beets" },\r\n        { name: "Carrots" },\r\n        { name: "Celery" },\r\n        { name: "Lettuce" },\r\n        { name: "Onions" },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nconst data = flattenTree(folder);\r\n\r\nfunction ControlledExpandedNode() {\r\n  const [expandedIds, setExpandedIds] = useState();\r\n\r\n  const onKeyDown = (e) => {\r\n    if (e.key === "Enter") {\r\n      getAndSetIds();\r\n    }\r\n  };\r\n\r\n  const getAndSetIds = () => {\r\n    setExpandedIds(\r\n      document\r\n        .querySelector("#txtIdsToExpand")\r\n        .value.split(",")\r\n        .map((x) => parseInt(x.trim()))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <label htmlFor="txtIdsToExpand">\r\n          Comma-delimited list of branch node IDs to expand:\r\n        </label>\r\n        <input id="txtIdsToExpand" type="text" onKeyDown={onKeyDown} />\r\n        <button onClick={() => getAndSetIds()}>Set</button>\r\n      </div>\r\n      <div>\r\n        <button onClick={() => setExpandedIds([])}>\r\n          Clear all expanded nodes\r\n        </button>\r\n      </div>\r\n      <div className="checkbox">\r\n        <TreeView\r\n          data={data}\r\n          aria-label="Controlled expanded node tree"\r\n          expandedIds={expandedIds}\r\n          defaultExpandedIds={[1]}\r\n          nodeRenderer={({\r\n            element,\r\n            isBranch,\r\n            isExpanded,\r\n            isDisabled,\r\n            getNodeProps,\r\n            level,\r\n            handleExpand,\r\n          }) => {\r\n            return (\r\n              <div\r\n                {...getNodeProps({ onClick: handleExpand })}\r\n                style={{\r\n                  marginLeft: 40 * (level - 1),\r\n                  opacity: isDisabled ? 0.5 : 1,\r\n                }}\r\n              >\r\n                {isBranch && <ArrowIcon isOpen={isExpanded} />}\r\n                <span className="name">\r\n                  {element.name}-{element.id}\r\n                </span>\r\n              </div>\r\n            );\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ArrowIcon = ({ isOpen, className }) => {\r\n  const baseClass = "arrow";\r\n  const classes = cx(\r\n    baseClass,\r\n    { [`${baseClass}--closed`]: !isOpen },\r\n    { [`${baseClass}--open`]: isOpen },\r\n    className\r\n  );\r\n  return <IoMdArrowDropright className={classes} />;\r\n};\r\n\r\nexport default ControlledExpandedNode;\r\n',css:x.Z,mdxType:"CodeTabs"}))}k.isMDXComponent=!0},3952:function(e,n){n.Z=".basic.tree {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 20px;\r\n}\r\n.basic .tree-node,\r\n.basic .tree-node-group {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.basic .tree-branch-wrapper,\r\n.basic .tree-node__leaf {\r\n  outline: none;\r\n}\r\n\r\n.basic .tree-node--focused {\r\n  outline-color: rgb(77, 144, 254);\r\n  outline-style: auto;\r\n  outline-width: 2px;\r\n  display: block;\r\n}\r\n\r\n.basic .tree-node__branch {\r\n  display: block;\r\n}\r\n\r\n.basic .tree-node {\r\n  cursor: pointer;\r\n}\r\n"}}]);